I"˘<h2 id="purpose">Purpose</h2>
<p>When designing on the algorithm implementation, the matlab script is one of the common programming languages to develope in the initial stage.</p>

<p>In this post, I recorded a few pieces of information in this post for avoiding to forget bit and pieces and will keep adding some informations.</p>

<h2 id="read-data-from-text-file">Read data from text file</h2>
<p>The fscanf is the common syntax to read data from text file.</p>

<p>Usage:</p>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">data = fscanf(filename, formatSpec)</span></code></pre></div>

<h4 id="example">Example:</h4>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">filename = 'data.txt';
file = fopen(filename,'rt');
data = fscanf(file, '%x');
fclose(file)</span></code></pre></div>

<h2 id="write-data-to-text-file">Write data to text file</h2>
<p>The fprint is the common syntax to write formatted data to file.</p>

<p>Usage:</p>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">fprintf(file_name, format, A1)</span></code></pre></div>

<h4 id="example-write-32-bits-data-to-text-file">Example: Write 32 bits Data to Text File</h4>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">filename = 'test.txt';
file = fopen(filename, 'w');
fprintf(file, '%08x ', 32767);
fclose(file);</span></code></pre></div>

<h2 id="twos-complement">Two‚Äôs complement</h2>
<p>On the fixed-point design, we need to care about whether the fixed-point number is negative or not when doing two‚Äôs complement. Usually, we can use sign field to distinguish positive or negative.</p>

<h4 id="example-1">Example:</h4>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">% Check sign bit
sign_field = data &gt;= (bit_len -1);

% Conversion (decimal)
if (sign_field)
  data = - (2^bit_len - data);</span></code></pre></div>

<h2 id="signed-fixed-point-numeric-object">Signed fixed-point numeric object</h2>
<p>The matlab supports the constructures of signed and unsigned fixed-point numeric object, but unfortunately it does not have the overflowing protection, i.e The value can not more than 3 when the integral length is 3.</p>

<h6><ol>
<li>sfi: With signed, two's-complement </li>  
<li>ufi: unsigned fixed-point numbers number</li>
</ol></h6>

<p>Usage:</p>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">sign_fixed = sfi(value, word length, fraction length)</span></code></pre></div>

<p>Data Properties</p>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">bin ‚Äî Stored integer value of a fi object in binary
data ‚Äî Numerical real-world value of a fi object
dec ‚Äî Stored integer value of a fi object in decimal
double ‚Äî Real-world value of a fi object, stored as a MATLAB¬Æ double
hex ‚Äî Stored integer value of a fi object in hexadecimal
int ‚Äî Stored integer value of a fi object, stored in a built-in MATLAB integer data type. You can also use int8, int16, int32, int64, uint8, uint16, uint32, and uint64 to get the stored integer value of a fi object in these formats
oct ‚Äî Stored integer value of a fi object in octal</span></code></pre></div>

<h4 id="example-2">Example:</h4>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">b = sfi(3, 5, 2);
% binary representation
b.bin
% real-world value
b.data
% hexadecimal representation
b.hex</span></code></pre></div>

<h2 id="read-radio-file">Read radio file</h2>
<p>The audioread is the common syntax to write audio file, i.e., wav, mp3, au, flac, etc.</p>

<p>Usage:</p>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">[data,Fs] = audioread(filename)</span></code></pre></div>
<p>, where data is the sampled data, and Fs is the samplerate for that data.</p>

<h4 id="example-read-a-wav-file">Example: Read a wav file</h4>
<div class="language-shell highlighter-rouge"><pre class="highlight" style="font-size:12px"><code class="hljs ruby"><span class="nb">samples_frame = 640;
test_wav = sprintf('wav/test.wav');
[data, Fs] = audioread(test_wav);
numFrame = round(length(data) / (samples_frame));
time = (1:length(data))/Fs;
plot(time, data);
title('wave: s(n)');</span></code></pre></div>

<p>Result:</p>
<figure>
<a><img src="/picture/wav.png" /></a>
</figure>

<p>=========== To be continued‚Ä¶. ==========</p>

<h2 id="reference">Reference</h2>
<p>[1] <a href="https://stackoverflow.com/questions/9195716/read-txt-file-in-matlab">Read txt file in Matlab</a></p>

<p>[2] <a href="http://www.thphys.nuim.ie/CompPhysics/matlab/help/techdoc/ref/fprintf.html">Write formatted data to file</a></p>

<p>[3] <a href="https://stackoverflow.com/questions/1049722/what-is-2s-complement">What is ‚Äú2‚Äôs Complement‚Äù?</a></p>

<p>[4] <a href="https://www.mathworks.com/help/fixedpoint/ref/sfi.html">Construct signed fixed-point numeric object</a></p>

<p>[5] <a href="https://www.mathworks.com/help/matlab/ref/audioread.html">audioread</a></p>

<p>[6] <a href="http://www.mirlab.org/jang/books/audioSignalProcessing/">Audio Signal Processing and Recognition (Èü≥Ë®äËôïÁêÜËàáËæ®Ë≠ò)</a></p>

<h2 id="note">Note</h2>
<p>If you have any constructive criticism or advises, leave the comments below or feel free to email me qazqazqaz850@gmail.com.

Hope this post will help! :)
</p>
:ET